{"version":3,"sources":["components/EventFormCard.js","components/EventTimerCard.js","EventTimer.js","App.js","serviceWorker.js","index.js"],"names":["EventFormCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","oninputchange","e","setState","defineProperty","target","name","value","onsubmit","preventDefault","_this$state","state","eName","day","time","d","split","t","date","toString","data","deadline","Date","props","sendEventData","dateInput","document","querySelector","todaysDate","minDate","getFullYear","getMonth","slice","getDate","setAttribute","react_default","a","createElement","className","onSubmit","style","textAlign","htmlFor","type","onChange","required","React","Component","EventTimerCard","stopTimer","eventId","timerDisplay","_this2","interval","setInterval","now","rt","days","Math","floor","hours","minutes","seconds","str","clearInterval","onClick","EventTimer","receiveEventData","event","eventName","events","concat","toConsumableArray","addEvent","index","splice","console","log","map","components_EventTimerCard","components_EventFormCard","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8873425e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass EventFormCard extends React.Component{\r\n     \r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            eName : \"\",     //eName = Event Name\r\n            day : \"\",       //day = Deadline of the Event\r\n            time : \"\"       //time = time of the event\r\n        }  \r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n      var dateInput = document.querySelector('input[type=date]');  //-----------start------------------\r\n      var todaysDate = new Date();\r\n      var year = todaysDate.getFullYear();                            //this block of code restricts the entry of earlier\r\n      var month = (\"0\" + (todaysDate.getMonth() + 1)).slice(-2);      //date then current date\r\n      var day = (\"0\" + todaysDate.getDate()).slice(-2); \r\n      var minDate = (year +\"-\"+ month +\"-\"+ day);     \r\n      dateInput.setAttribute(\"min\",minDate);                  //---------------end----------------\r\n      \r\n    }\r\n\r\n    oninputchange = (e)=>{   //oninputchange : updates the state of the component as the input changes\r\n        this.setState({[e.target.name] : e.target.value}) \r\n    }\r\n\r\n    onsubmit = (e)=>{                        //onsubmit : submits the form data to form component through props\r\n        e.preventDefault();\r\n        const {eName,day,time} = this.state;  \r\n        \r\n        var d = day.split(\"-\");\r\n        var t = time.split(\":\");  \r\n         \r\n         var date = d[1].toString() + \" \" + d[2].toString() + \" \" + d[0].toString() + \" \" + t[0].toString() + \":\" + t[1].toString() + \":00\";\r\n         \r\n         const dline = new Date(date);\r\n\r\n        const data = {\r\n                 eName,\r\n                 deadline : dline,\r\n             }\r\n        this.props.sendEventData(data);\r\n    }\r\n\r\n    render(){\r\n      return(\r\n      <form className=\"eventformcard mx-auto mt-3\" onSubmit={this.onsubmit} >\r\n          <h2 style={{textAlign:\"center\"}}> Create an event </h2>\r\n        <div className=\"form-group\"> \r\n         <label htmlFor=\"eName\">Event Name</label>\r\n         <input type=\"text\" className=\"form-control form-control-sm\" name=\"eName\" onChange={this.oninputchange} required/> \r\n        </div>\r\n        <div className=\"form-group\">\r\n         <label htmlFor=\"day\">Day</label>  \r\n         <input type=\"date\" className=\"form-control form-control-sm\" name=\"day\" onChange={this.oninputchange} required/>  \r\n        </div>  \r\n        <div className=\"form-group\">\r\n         <label htmlFor=\"time\">Time</label>  \r\n         <input type=\"time\" className=\"form-control form-control-sm\" name=\"time\" onChange={this.oninputchange} required/>           </div>           \r\n      \r\n         <input type=\"submit\" className=\"btn btn-block btn-primary \" value=\"Start Event Timer\"/>\r\n      </form>\r\n      );\r\n    }\r\n}\r\n\r\n\r\nexport default EventFormCard;","import React from 'react';\r\n\r\nclass EventTimerCard extends React.Component{\r\n   \r\n   constructor(){\r\n    super();\r\n     \r\n    this.state = {\r\n         timerDisplay : \"\",\r\n     }\r\n\r\n   }\r\n\r\n   componentDidMount(){\r\n  \r\n     if(this.props.deadline){\r\n       this.interval = setInterval(()=>{\r\n         var now = new Date();\r\n         var rt = this.props.deadline - now;\r\n         var days = Math.floor((rt/(1000*60*60*24)));\r\n         var hours = Math.floor(((rt%(1000*60*60*24))/(1000*60*60)));\r\n         var minutes = Math.floor(((rt%(1000*60*60))/(1000*60)));\r\n         var seconds = Math.floor((rt%(1000*60))/1000);  \r\n          \r\n          var str = days.toString() + \":\" + hours.toString() + \":\" + minutes.toString() + \":\" + seconds.toString();\r\n         \r\n         this.setState({timerDisplay : str});\r\n        if(rt<=0) {\r\n          this.setState({timerDisplay : \"0:0:0:0\"});\r\n          clearInterval(this.interval);\r\n        } \r\n     },1000);\r\n    }\r\n   } \r\n\r\n   stopTimer = ()=>{\r\n       this.props.stopTimer(this.props.eventId);\r\n        //console.log(\"stop timer in EventTimer!!\")\r\n   }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"eventtimer mx-auto\">\r\n               <p>{this.props.eName}</p>\r\n              <h1>{this.state.timerDisplay}</h1> \r\n              <button onClick={this.stopTimer} className=\"btn btn-outline-danger\">Stop Timer</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default EventTimerCard;","import React from 'react';\r\nimport EventFormCard from \"./components/EventFormCard\";\r\nimport EventTimerCard from \"./components/EventTimerCard\";\r\n\r\nclass EventTimer extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n  \r\n    this.state = {\r\n                  events : [],\r\n                  addEvent : true\r\n                 }\r\n}\r\n\r\n  receiveEventData = (data) => {\r\n    \r\n        const event = {\r\n          eventName : data.eName,\r\n          deadline : data.deadline\r\n        } \r\n\r\n       this.setState({events : [...this.state.events,event],addEvent : false});\r\n    }\r\n\r\n  stopTimer = (index)=>{\r\n     let e = this.state.events;\r\n     e.splice(index,1);\r\n     this.setState({events : e},()=>{console.log(this.state.events)});\r\n  }  \r\n\r\n  render(){\r\n  return (\r\n    <div className=\"app row\"> \r\n\r\n    <div className=\"col col-12 col-xl-9 col-lg-8 col-md-6 col-12 rb\">           \r\n     <div className=\"row\">    \r\n      {\r\n        this.state.events.map((event,index)=>(\r\n          <div className=\"col col-md-4\"> \r\n          <EventTimerCard eName = {event.eventName} deadline = {event.deadline} stopTimer={this.stopTimer} eventId = {index} /></div> \r\n         ))\r\n      }\r\n      </div>\r\n     </div>\r\n    \r\n\r\n    <div className=\"col col-12 col-xl-3 col-lg-4 col-md-6 col-12\">\r\n     { \r\n      this.state.addEvent \r\n            ? <EventFormCard sendEventData = {this.receiveEventData} /> \r\n            : <button className=\"btn btn-block btn-dark mt-3 addbtn\" onClick={()=>{this.setState({addEvent:true})}}>Add Event</button>\r\n     \r\n     }\r\n    </div>\r\n          \r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default EventTimer;\r\n","import React from 'react';\nimport EventTimer from './EventTimer';\nimport { HashRouter as Router, Route, Switch} from 'react-router-dom';\n\nclass App extends React.Component {\n\n\n  render(){\n  return (\n  <Router>\n    <Switch>\n    <Route exact path=\"/\" component={EventTimer}/>\n    </Switch>\n  </Router>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}